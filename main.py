import aiohttp
import openai
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import io
from aiogram.types import InputFile
import asyncio
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

file = open('config.json', 'r')
config = json.load(file)

openai.api_key = config['openai']
bot = Bot(config['token'])
dp = Dispatcher(bot)

chat_storage = {}

messages = [
    {"role": "system", "content": "you are chatgpt"},
    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}
]


def update(messages, role, content):
    messages.append({"role": role, "content": content})
    return messages


class ChatMode(StatesGroup):
    CHATGPT = State()
    DALLE2 = State()


@dp.message_handler(commands=['chatgpt'])
async def start_chatting(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in chat_storage:
        chat_storage[chat_id] = messages.copy()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.message_handler(chat_id=chat_id)
    async def continue_chatting(message: types.Message):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = message.chat.id
        update(chat_storage[chat_id], "user", message.text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        sent_message = await message.answer("ChatGPT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É API OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=chat_storage[chat_id]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sent_message.delete()
        await message.answer(response.choices[0].get('text') or response.choices[0]['message'].get('content'))

    @dp.message_handler(chat_id=chat_id)
    async def handle_user_message(message: types.Message):
        chat_id = message.chat.id
        if chat_id not in chat_storage:
            chat_storage[chat_id] = messages.copy()

        if not dp.is_conversation_started_with(chat_id=chat_id):
            await dp.start_conversation(chat_id=chat_id, from_user=chat_id)

        await continue_chatting(message)


async def generate_image(text):
    try:
        response = openai.Image.create(
            prompt=text,
            n=1,
            size="1024x1024"
        )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        img = await aiohttp.ClientSession().get(response['data'][0]['url'])
        img = io.BytesIO(await img.read())
        return img
    except openai.error.InvalidRequestError:
        logging.exception("Request contains forbidden symbols.")
        return None
    except Exception as e:
        logging.exception(e)
        return None


async def send_image(chat_id, image):
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
        image = InputFile(image)
        await bot.send_photo(chat_id=chat_id, photo=image)
    except Exception as e:
        logging.exception(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dalle22
@dp.message_handler(commands=['dalle2'])
async def dalle2_command(message: types.Message):
    chat_id = message.chat.id
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    @dp.message_handler(chat_id=chat_id)
    async def continue_dalle2(message: types.Message):
        text = message.text
        sent_message = await message.answer("Dalle2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
        image = await generate_image(text)
        if image:
            await send_image(chat_id, image)
        else:
            await bot.send_message(chat_id=chat_id,
                                   text="–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã üö´. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")
        await sent_message.delete()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ChatGpt –±–æ—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /chatgpt, –∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /dalle2 –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /settings, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–∞ /chatgptclear, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å /chatgptstore")


@dp.message_handler(commands=['help'])
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ChatGpt, —á—Ç–æ–±—ã —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /chatgpt –∏–ª–∏ /dalle2 —á—Ç–æ–±—ã —Å–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /chatgptstore, –∞ –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–æ /chatgptclear. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –ø–æ–º–æ—á—å, –æ–±—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ @AleksFolt.")


@dp.message_handler(commands=['about'])
async def start_command(message: types.Message):
    await message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å: @AleksFolt, –°–¥–µ–ª–∞–Ω–æ –Ω–∞ Python, –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º @AleksFolt")


@dp.message_handler(commands=['chatgptstore'])
async def store_command(message: types.Message):
    chat_id = message.chat.id
    if chat_id in chat_storage:
        with open(f'chat_storage_{chat_id}.json', 'w') as f:
            json.dump(chat_storage[chat_id], f)
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø—É—Å—Ç–∞—è. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


@dp.message_handler(commands=['chatgptclear'])
async def clear_command(message: types.Message):
    chat_id = message.chat.id
    if chat_id in chat_storage:
        chat_storage[chat_id] = messages.copy()
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø—É—Å—Ç–∞—è. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


# –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
settings_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('/chatgpt'),
    KeyboardButton('/dalle2'),
    KeyboardButton('/help'),
    KeyboardButton('/about'),
    KeyboardButton('/chatgptclear'),
    KeyboardButton('/chatgptstore')
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é
@dp.message_handler(commands=['settings'])
async def settings_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=settings_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer("–ü–æ–º–æ—â—å")


@dp.message_handler(commands=['about'])
async def about_command(message: types.Message):
    await message.answer("–û –±–æ—Ç–µ")


@dp.message_handler(commands=['chatgptclear'])
async def chatgptclear_command(message: types.Message):
    await message.answer("–û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏")


@dp.message_handler(commands=['chatgptstore'])
async def chatgptstore_command(message: types.Message):
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏")


executor.start_polling(dp, skip_updates=True)
